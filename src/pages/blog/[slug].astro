---
// Blog Post Page
// ------------
// Description: The blog post page.

// Components
// - Layout
import Layout from '../../layouts/PostLayout.astro'
import PortableText from '../../components/ui/PortableText.astro'
import { portableTextToString, isPortableText } from '../../lib/portableTextHelpers'

// Data
import { getAllBlogPosts, getBlogPostBySlug, urlFor } from '../../lib/sanity'

// Define types for the blog post data
interface BlogPost {
  _id: string;
  title: string;
  slug: { current: string };
  description: string;
  pubDate: string;
  publishedAt?: string;
  author: string;
  image: any;
  tags?: string[];
  content?: any;
  body?: any;
  category?: string;
  featured?: boolean;
}

export async function getStaticPaths() {
	try {
		const blogPosts = await getAllBlogPosts()
		console.log('Static paths for blog posts:', blogPosts?.length || 0)
		
		if (!blogPosts || blogPosts.length === 0) {
			console.warn('No blog posts found in Sanity')
			return []
		}
		
		return blogPosts.map((post: BlogPost) => ({
			params: { slug: post.slug.current },
			props: { slug: post.slug.current }
		}))
	} catch (error) {
		console.error('Error fetching blog posts for static paths:', error)
		return []
	}
}

const { slug } = Astro.params
console.log('Fetching blog post for slug:', slug)

const post = await getBlogPostBySlug(slug)
console.log('Blog post found:', !!post)

if (!post) {
	console.warn('Blog post not found for slug:', slug)
	return Astro.redirect('/404')
}

// Format the post data to match the existing layout expectations
const formattedPost = {
	title: isPortableText(post.title) ? portableTextToString(post.title) : post.title,
	originalTitle: post.title, // Keep original for display with formatting
	description: post.description,
	pubDate: new Date(post.pubDate),
	author: post.author,
	image: urlFor(post.image).url(),
	tags: post.tags || []
}
---

<Layout frontmatter={formattedPost}>
	<PortableText content={post.body || post.content} />
</Layout>